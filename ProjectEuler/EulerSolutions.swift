//====================================================================
//
//  EulerSolutions.swift
//  ProjectEuler - Archive: https://projecteuler.net/archives
//
//  Created by drew curry on 2018-12-01.
//  Copyright Â© 2018 yinApps. All rights reserved.
//
//====================================================================

import Foundation

public class EulerSolutions {

    static func question3(limit: Int = 600851475143) -> Int {
        //====================================================================
        // Q3: https://projecteuler.net/problem=3
        //The prime factors of 13195 are 5, 7, 13 and 29.
        //  What is the largest prime factor of the number 600851475143 ?
        //  largest a factor other than self can be is x/2 so start there
        
        //Start from 2 up to sqrtTop of the limit, as the lower factor tuple cannot exist beyond that.
        //
        //  This worked smoothly in ~ 0.013 seconds
        
        //Simple logic: Starting with the lowest value of 2 up to the sqr root of the limit, check for
        //  loop index being the factor. If so we have a factor tuple with the index being the lower
        //  of the two involved values. Because we start at the bottom, the FIRST encountered uppper
        //  tuple that is prime is the answer and we exit. If the upper is not prime, check the lwoer tuple for
        //  prime, if so, simply save it and continue loop. Continue until we exit or the loop ends.
        //  If the loop ends, return the last saved lower tuple as the answer.  Easy.
        //====================================================================
        
        let sqrRootUpperLimit = Int(sqrt(Double(limit)))
        var savedLowerPrimeFactorTuple: Int = 0
        
        for lowerFactorTuple in 2 ... sqrRootUpperLimit {
            if (limit % lowerFactorTuple == 0) {
                let upperFactorTuple = limit / lowerFactorTuple
                
                if (isPrime(upperFactorTuple)) {
                    return upperFactorTuple}
                else {
                    if (isPrime(lowerFactorTuple)) { savedLowerPrimeFactorTuple = lowerFactorTuple}
                }
            }
        }
        return savedLowerPrimeFactorTuple
    }
    
    static func question2(limit: Int = 4000000) -> Int {
        // Q2: https://projecteuler.net/problem=2
        //    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
        //    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        //    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        var sum: Int = 2
        var a: Int = 1
        var b: Int = 2
        var c: Int = a + b
        
        while c < limit {
            if (c % 2 == 0) { sum += c}
            a = b
            b = c
            c = a + b
        }
        return sum
        
    }

    static func question1(limit: Int = 10) -> Int {
        // Q1: https://projecteuler.net/problem=1
        //        If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
        //        Find the sum of all the multiples of 3 or 5 below 1000
        var sum: Int = 0
        for x in 0..<limit {
            if (x%3 == 0 || x%5 == 0) { sum += x}
        }
        return sum
    }













}

extension EulerSolutions {
    //manaage utility functions
    
    static func isPrime(_ n: Int) -> Bool {
        //normally this would be in a utility library but left here as part of the project
        guard n >= 2     else { return false }
        guard n != 2     else { return true  }
        guard n % 2 != 0 else { return false }
        //Swift to the rescue of lines required but adds to the maintainence of understanability
        return !stride(from: 3, through: Int(sqrt(Double(n))), by: 2).contains { n % $0 == 0 }
    }
}
